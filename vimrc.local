set tags=./tags;/,~/.vimtags
" Make tags placed in .git/tags file available in all levels of a repository
let gitroot = substitute(system('git rev-parse --show-toplevel'), '[\n\r]', '', 'g')
if gitroot != ''
    let &tags = &tags . ',' . gitroot . '/.git/tags'
endif

" CSApprox {
    let g:CSApprox_attr_map = { 'bold' : 'bold', 'italic' : '', 'sp' : '' }
" }
" bundle settings
" ===============

"autocmd FileType c,cpp,cs,java,go,php,javascript,python,twig,xml,yml autocmd BufWritePre <buffer> if !exists('g:spf13_keep_trailing_whitespace') | call StripTrailingWhitespace() | endif 

" Solarized {
    let g:solarized_termcolors=256
    let g:solarized_termtrans=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
"    color solarized             " Load a colorscheme
" }

" unite {
    let g:unite_source_history_yank_enable = 1
    let g:unite_source_file_mru_limit = 200
    let g:unite_source_file_mru_filename_format = ':~:.'
    let g:unite_source_file_mru_time_format = ''
    let g:unite_source_sesions_enable_auto_save = 1

    call unite#filters#matcher_default#use(['matcher_fuzzy'])
    "call unite#filters#sorter_default#use(['sorter_rank'])

    call unite#custom#profile('default', 'context', {
    \   'no_split': 1,
    \   'start_insert': 1
	\ })

    " ignore stuff when using the following filters
    call unite#custom#source('file_rec,file_rec/async,file_mru,file,buffer,grep',
                \ 'ignore_pattern', join([
                \ '\.git/',
                \ 'git5/.*/review/',
                \ 'google/obj/',
                \ 'tmp/',
                \ '.sass-cache',
                \ 'node_modules/',
                \ 'bower_components/',
                \ 'dist/',
                \ '.git5_specs/',
                \ '.pyc',
                \ ], '\|'))

    " limit matches
    call unite#custom#source('file_rec,file_rec/async,file_mru,file,buffer,grep',
                \ 'max_candidates', 50)

    if executable('jvgrep')
	  " For jvgrep.
	  let g:unite_source_grep_command = 'jvgrep'
	  let g:unite_source_grep_default_opts = '-i --exclude ''\.(git|svn|hg|bzr)'''
	  let g:unite_source_grep_recursive_opt = '-R'
	endif

	" For ack.
	if executable('ack-grep')
	  let g:unite_source_grep_command = 'ack-grep'
	  let g:unite_source_grep_default_opts = '-i --no-heading --no-color -k -H'
	  let g:unite_source_grep_recursive_opt = ''
	endif

" }
"
" sneak {
    let g:sneak#steak = 1
    nmap f <Plug>SneakForward
    nmap F <Plug>SneakBackward
    xmap f <Plug>VSneakForward
    xmap F <Plug>VSneakBackward
"}

" vim-autoclose
let g:autoclose_vim_commentmode = 1

" bufexplorer {
let g:bufExplorerDefaultHelp=0
let g:bufExplorerSplitBelow=0

" }

" Ultisnips {
    let g:UltiSnipsSnippetDirectories=["UltiSnips", "bundle/vim-snippets/UltiSnips/", "bundle/angular-vim-snippets/UltiSnips", "bundle/vim-go/gosnippets/UltiSnips"]

    " make YCM compatible with UltiSnips (using supertab)
    let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
    let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
    "let g:SuperTabDefaultCompletionType = '<C-n>'
    let g:ycm_key_invoke_completion = '<c-n>'
    " better key bindings for UltiSnipsExpandTrigger
    let g:UltiSnipsExpandTrigger = "<tab>"
    let g:UltiSnipsJumpForwardTrigger = "<tab>"
    let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
    let g:ycm_confirm_extra_conf = 0

" }

" vim-airline {
        " Set configuration options for the statusline plugin vim-airline.
        " Use the powerline theme and optionally enable powerline symbols.
        " To use the symbols , , , , , , and .in the statusline
        " segments add the following to your .vimrc.before.local file:
        "   let g:airline_powerline_fonts=1
        " If the previous symbols do not render for you then install a
        " powerline enabled font.

        let g:airline#extensions#tabline#enabled = 1
        let g:airline#extensions#tabline#buffer_nr_show = 1
        let g:airline#extensions#tmuxline#enabled = 1

        " See `:echo g:airline_theme_map` for some more choices
        " Default in terminal vim is 'dark'
        if !exists('g:airline_theme')
            let g:airline_theme = 'solarized'
        endif
        if !exists('g:airline_powerline_fonts')
            " Use the default set of separators with a few customizations
            let g:airline_left_sep='›'  " Slightly fancier than '>'
            let g:airline_right_sep='‹' " Slightly fancier than '<'
        endif
" }

set background=dark
let g:airline_theme="dark"
if has("gui_running")
    colorscheme hemisu
else
    colorscheme molokai
endif

if has("autocmd") && exists("+omnifunc")
	autocmd Filetype *
		    \	if &omnifunc == "" |
		    \		setlocal omnifunc=syntaxcomplete#Complete |
		    \	endif
endif

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }

call frisk#AddEngine('gowalker', 'https://gowalker.org/?q=')
call frisk#AddEngine('ddgoog', 'http://www.duckduckgoog.com/?q=')

command! -nargs=1 Ngrep vimgrep "<args>" ~/Dropbox/Notes/**/*
