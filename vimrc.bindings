" Change mapleader key
let mapleader = ','

" Some helpers to edit mode
" http://vimcasts.org/e/14
cnoremap %% <C-R>=escape(expand('%:h'), ' ').'/'<cr>
map <Leader>e   :e %%
map <Leader>sp  :sp %%
map <Leader>vsp :vsp %%
map <Leader>lv  :e .lvimrc<cr>
map <Leader>sb  :source ~/.vimrc<cr>

map <Leader>eb :e ~/.vim/vimrc.bindings"<cr><cr>
map <Leader>ev :e ~/Dropbox/Notes/vim-cheatsheet.txt<cr>
map <Leader>ec :e ~/Dropbox/Notes/coding-journals.txt<cr>
map <Leader>ed :e ~/Dropbox/Notes/debugging-journals.txt<cr>
map <Leader>en :e ~/Dropbox/Notes/nca-journals.txt<cr>
map <Leader>es :e ~/Dropbox/Notes/sagacity-journals.txt<cr>

map <Leader>0 :e#<cr>
map <Leader>1 :1b<cr>
map <Leader>2 :2b<cr>
map <Leader>3 :3b<cr>
map <Leader>4 :4b<cr>
map <Leader>5 :5b<cr>
map <Leader>6 :6b<cr>
map <Leader>7 :7b<cr>
map <Leader>8 :8b<cr>
map <Leader>9 :9b<cr>

imap <C-c> <esc>:<Space>
" Note that remapping C-s requires flow control to be disabled
" (e.g. in .bashrc or .zshrc)
map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>
map <C-c><C-n> :cn<CR>
map <C-c><C-p> :cp<CR>
map ; :

map <Leader>s :set spell!<cr>

" xnoremap <f1> "zy:!firefox "http://www.google.com/search?q=<c-r>=substitute(@z,' ','%20','g')<cr>"<return>gv

" Vundle
nmap <Leader>bi :source ~/.vimrc<cr>:PluginInstall<cr>

map <Leader>cp ggVG"*y
map <Leader>p :set paste<cr>o<esc>"*]p:set nopaste<cr>

map <Leader>use :UltiSnipsEdit<cr>

" Breaking lines with \[enter] without having to go to insert mode (myself).
nmap <leader><cr> i<cr><Esc>

" F9  - Run external make command
noremap <silent> <f9> :echo "Running waf..."<cr>:sil! ./waf<cr>:cw<cr>:redraw!<cr>:echo "waf complete."<cr>

" Toggle paste mode
nmap <silent> <Leader>ip :set invpaste<cr>:set paste?<cr>

" Turn off that stupid highlight search
nmap <silent> <Leader>n :set invhls<cr>:set hls?<cr>

" Set text wrapping toggles
nmap <silent> <Leader>iw :set invwrap<cr>:set wrap?<cr>

" Set up retabbing on a source file
nmap <silent> <Leader>rr :1,$retab<cr>

" cd to the directory containing the file in the buffer
nmap <silent> <Leader>cd :lcd %:h<cr>
nmap <silent> <Leader>md :!mkdir -p %:p:h<cr>

" execute contents of register "
nmap <silent> <Leader>rc :@"<cr>

" saving and resoring session
map <S-F5> :execute "source ".input("Load session: ", "~/.vim/session/", "file")<cr>
map <F5> :execute "mksession! ".input("Save session: ", "~/.vim/session/", "file")\| :echo "Session saved."<CR>

" allow command line editing like emacs
"cnoremap <C-A>      <Home>
"cnoremap <C-B>      <Left>
"cnoremap <C-E>      <End>
"cnoremap <C-F>      <Right>
"cnoremap <C-N>      <End>
"cnoremap <C-P>      <Up>

" Emacs-like beginning and end of line.
imap <c-e> <c-o>$
imap <c-a> <c-o>^

" buffer key mapping
noremap <silent> <C-Tab> :bnext<cr>
noremap <silent> <C-S-Tab> :bprevious<cr>
noremap <silent> <Leader>ls :ls<cr>

" simplified buffer flipping
noremap <silent> <C-H> :wincmd h<cr>
noremap <silent> <C-L> :wincmd l<cr>
noremap <silent> <C-J> :wincmd j<cr>
noremap <silent> <C-K> :wincmd k<cr>

" re-assign all windows keys
noremap <silent> <Leader>h :wincmd h<cr>
noremap <silent> <Leader>j :wincmd j<cr>
noremap <silent> <Leader>k :wincmd k<cr>
noremap <silent> <Leader>l :wincmd l<cr>

noremap <silent> <Leader>sp     :wincmd p<cr>
noremap <silent> <Leader>se     :wincmd =<cr>
noremap <silent> <Leader>sh     :resize +10'<cr>
noremap <silent> <Leader>sh-    :resize -10'<cr>
noremap <silent> <Leader>sv     :vertical resize +10<cr>
noremap <silent> <Leader>sv-    :vertical resize -10<cr>

" close windows
noremap <silent> <Leader>cj :wincmd j<cr>:close<cr>
noremap <silent> <Leader>ck :wincmd k<cr>:close<cr>
noremap <silent> <Leader>ch :wincmd h<cr>:close<cr>
noremap <silent> <Leader>cl :wincmd l<cr>:close<cr>
noremap <silent> <Leader>cx :close<cr>
noremap <silent> <Leader>co :only<cr>

" windows placeme<Leader>
noremap <silent> <Leader>ml :wincmd L<cr>
noremap <silent> <Leader>mk :wincmd K<cr>
noremap <silent> <Leader>mh :wincmd H<cr>
noremap <silent> <Leader>mj :wincmd J<cr>

noremap <silent> <Leader>bd :bd<cr>

noremap <silent> <Leader>^ :setl hls<cr>:let @/="<C-r><C-w>"<cr>
noremap <silent> <Leader>vgs :vimgrep /<C-r>// %<cr>:ccl<cr>:cwin<cr><C-W>J:set nohls<cr>
noremap <silent> <Leader>vgw :vimgrep /<C-r><C-w>/ %<cr>:ccl<cr><C-W>J:set nohls<cr>
noremap <silent> <Leader>vgW :vimgrep /<C-r><C-a>/ %<cr>:ccl<cr><C-W>J:set nohls<cr>

" make Y consistent with C and D
nnoremap Y y$

" Code folding options
nmap <leader>f0 :set foldlevel=0<CR>
nmap <leader>f1 :set foldlevel=1<CR>
nmap <leader>f2 :set foldlevel=2<CR>
nmap <leader>f3 :set foldlevel=3<CR>
nmap <leader>f4 :set foldlevel=4<CR>
nmap <leader>f5 :set foldlevel=5<CR>
nmap <leader>f6 :set foldlevel=6<CR>
nmap <leader>f7 :set foldlevel=7<CR>
nmap <leader>f8 :set foldlevel=8<CR>
nmap <leader>f9 :set foldlevel=9<CR>

" Find merge conflict markers
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>

" Shortcuts
" Change Working Directory to that of the current file
cmap cwd lcd %:p:h
cmap cd. lcd %:p:h

" Visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" Allow using the repeat operator with a visual selection (!)
" http://stackoverflow.com/a/8064607/127816
vnoremap . :normal .<CR>

" Fix home and end keybindings for screen, particularly on mac
" - for some reason this fixes the arrow keys too. huh.
if OSX()
    map [F $
    imap [F $
    map [H g0
    imap [H g0
endif

" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" Map <Leader>fa to display all lines with keyword under cursor
" and ask which one to jump to
nmap <Leader>fa [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>

" FIXME: Revert this f70be548
" fullscreen mode for GVIM and Terminal, need 'wmctrl' in you PATH
map <silent> <F11> :call system("wmctrl -ir " . v:windowid . " -b toggle,fullscreen")<CR>

"nnoremap <leader>. :CtrlPMixed<cr>

" re-indent the buffer
noremap <Leader>= :call Preserve("normal gg=G")<cr>

" Fugitive {
    nnoremap <silent> <leader>gs :Gstatus<CR>
    nnoremap <silent> <leader>gd :Gdiff<CR>
    nnoremap <silent> <leader>gc :Gcommit<CR>
    nnoremap <silent> <leader>gb :Gblame<CR>
    nnoremap <silent> <leader>gl :Glog<CR>
    nnoremap <silent> <leader>gp :Git push<CR>
    nnoremap <silent> <leader>ge :Gedit<CR>
    nnoremap <silent> <leader>gf :Git fetch origin<CR>
    " Mnemonic _i_nteractive
    nnoremap <silent> <leader>gi :Git add -p %<CR>
"}

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()

" Intellizense
noremap <silent> <Leader>I :Intellisense<cr>

" map F12 to Toggle NERD Tree view
noremap <silent> <F12> :NERDTreeToggle<cr>
inoremap <silent> <F12> :NERDTreeToggle<cr>
noremap <Leader>tn :NERDTreeToggle<cr>

" Tagbar mappings
noremap <silent> <c-F12> :TagbarToggle<cr>
inoremap <silent> <c-F12> :TagbarToggle<cr>
noremap <Leader>tg :TagbarToggle<cr>

noremap <silent> <F10> :BufExplorerHorizontalSplit<cr>
inoremap <silent> <F10> :BufExplorerHorizontalSplit<cr>
noremap <Leader>tb :BufExplorerHorizontalSplit<cr>

" trailing-whitespace setting
nmap <Leader>$ :call Preserve("%s/\\s\\+$//e")<CR>
noremap <silent> <Leader>w :FixWhitespace<cr>
noremap <silent> <Leader>ws :highlight link ExtraWhitespace Search<cr>
noremap <silent> <Leader>wh :highlight link ExtraWhitespace None<cr>

" UndoTree {
    nnoremap <Leader>u :UndotreeToggle<CR>
"}

map <C-c><C-d> :Frisk -ddgoog<space>

map     <C-\>   <Plug>(easymotion-sn)

" 1-character _inclusive_ Sneak (for enhanced 'f')
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
" visual-mode
xmap f <Plug>Sneak_f
xmap F <Plug>Sneak_F
" operator-pending-mode
omap f <Plug>Sneak_f
omap F <Plug>Sneak_F


" 1-character _exclusive_ Sneak (for enhanced 't')
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T
" visual-mode
xmap t <Plug>Sneak_t
xmap T <Plug>Sneak_T
" operator-pending-mode
omap t <Plug>Sneak_t
omap T <Plug>Sneak_T

augroup myfiletypes

    autocmd FileType go map <C-c><C-s> :Frisk -gowalker<space>
    
    au FileType go nmap <Leader>ti <Plug>(go-info)
    au FileType go nmap <Leader>td <Plug>(go-doc)
    au FileType go nmap <Leader>tdv <Plug>(go-doc-vertical)
    au FileType go nmap <Leader>tdb <Plug>(go-doc-browser)
    au FileType go nmap <Leader>tds <Plug>(go-def-split)
    au FileType go nmap <Leader>tdvs <Plug>(go-def-vertical)

    au FileType go nmap <leader>tr <Plug>(go-run)
    au FileType go nmap <leader>tb <Plug>(go-build)
    au FileType go nmap <leader>tt <Plug>(go-test)
augroup END

